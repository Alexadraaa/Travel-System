CREATE TABLE Country (
    country_id INT PRIMARY KEY AUTO_INCREMENT,
    country_name VARCHAR(255) NOT NULL,
    continent VARCHAR(255),
    currency VARCHAR(255)
);


CREATE TABLE City (
    city_id INT PRIMARY KEY AUTO_INCREMENT,
    city_name VARCHAR(255) NOT NULL,
    country_id INT,
    latitude DECIMAL(9, 6),
    longitude DECIMAL(9, 6),
    FOREIGN KEY (country_id) REFERENCES Country(country_id) ON DELETE CASCADE
);


CREATE TABLE Location (
    location_id INT PRIMARY KEY AUTO_INCREMENT,
    location_name VARCHAR(255) NOT NULL,
    latitude DECIMAL(9, 6),
    longitude DECIMAL(9, 6),
    country_id INT,
    city_id INT,
    FOREIGN KEY (city_id) REFERENCES City(city_id) ON DELETE SET NULL
);


CREATE TABLE User (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    exact_address VARCHAR(255),
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'beneficiary', 'partner') NOT NULL,
    membership_id INT UNIQUE,
    FOREIGN KEY (membership_id) REFERENCES Memberships(membership_id)
   
);


CREATE TABLE BusinessPartner (
    partner_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    tax_code VARCHAR(255),
    registration_number VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE
);

CREATE TABLE Admin (
    admin_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    role VARCHAR(50),
    phone_number VARCHAR(20),
    status ENUM('active', 'inactive', 'suspended') DEFAULT 'active',
    last_login TIMESTAMP,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    notes TEXT,
    profile_picture VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE
);


CREATE TABLE Business (
    business_id INT PRIMARY KEY AUTO_INCREMENT,
    partner_id INT,
    business_name VARCHAR(255) NOT NULL,
    business_type ENUM('Food and Beverage', 'Market', 'Bars', 'Hotels') NOT NULL,
    location_id INT,
    advertisement_details TEXT,
    price ENUM('Cheap', 'Moderate', 'Expensive'),
    FOREIGN KEY (partner_id) REFERENCES BusinessPartner(partner_id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES Location(location_id) ON DELETE SET NULL
);

CREATE TABLE Market (
    business_id INT PRIMARY KEY,
    market_type ENUM('Supermarket', 'Farmer Market', 'Flea Market', 'Specialty Market') NOT NULL,
    market_specific_attribute VARCHAR(255), 
    FOREIGN KEY (business_id) REFERENCES Businesses(business_id) ON DELETE CASCADE
);

CREATE TABLE FoodAndBeverage (
    business_id INT PRIMARY KEY,
    food_type ENUM('Restaurant', 'Cafe', 'Bar', 'Fast Food', 'Pub') NOT NULL,
    food_beverage_specific_attribute VARCHAR(255),     FOREIGN KEY (business_id) REFERENCES Businesses(business_id) ON DELETE CASCADE
);

CREATE TABLE Hotels (
    business_id INT PRIMARY KEY,
    hotel_filters TEXT, -- Add attributes for hotel filters
    hotel_stars INT, -- Add attributes for hotel stars
    hotel_floors INT, -- Add attributes for hotel floors
    hotel_specific_attribute VARCHAR(255), -- Add other specific attributes for hotels
    FOREIGN KEY (business_id) REFERENCES Businesses(business_id) ON DELETE CASCADE
);

CREATE TABLE Bars (
    business_id INT PRIMARY KEY,
    age_boundary INT, -- Add attributes for age boundary
    bar_type ENUM('Sports Bar', 'Cocktail Bar', 'Pub', 'Wine Bar', 'Dive Bar') NOT NULL,
    bar_specific_attribute VARCHAR(255), 
    FOREIGN KEY (business_id) REFERENCES Businesses(business_id) ON DELETE CASCADE
);

CREATE TABLE Beneficiary (
    beneficiary_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE,
    beneficiary_type ENUM('user', 'service_provider') NOT NULL,
    date_of_birth DATE,
    address VARCHAR(255),
    contact_number VARCHAR(20),
    location_id INT,
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES Location(location_id) ON DELETE SET NULL
);


CREATE TABLE SimpleUser (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    beneficiary_id INT UNIQUE,
    bistory TEXT,
    privacy_settings TEXT, 
    FOREIGN KEY (beneficiary_id) REFERENCES Beneficiary(beneficiary_id) ON DELETE CASCADE
);


CREATE TABLE ServiceProvider (
    provider_id INT PRIMARY KEY AUTO_INCREMENT,
    beneficiary_id INT UNIQUE,
    languages_spoken VARCHAR(255),
    specialties TEXT,
    certifications TEXT,
    FOREIGN KEY (beneficiary_id) REFERENCES Beneficiary(beneficiary_id) ON DELETE CASCADE
);


CREATE TABLE Service (
    provider_service_id INT PRIMARY KEY AUTO_INCREMENT,
    provider_id INT,
    description VARCHAR(255),
    service_name VARCHAR(255),
    location_id INT,
    FOREIGN KEY (location_id) REFERENCES Location(location_id) ON DELETE SET NULL,
    FOREIGN KEY (provider_id) REFERENCES ServiceProvider(provider_id) ON DELETE CASCADE
 );




CREATE TABLE Accommodation (
    service_id INT PRIMARY KEY,
    num_rooms INT,
    facilities TEXT,
    FOREIGN KEY (service_id) REFERENCES Service(provider_service_id) ON DELETE CASCADE
);


CREATE TABLE Car (
    service_id INT PRIMARY KEY,
    car_model VARCHAR(255),
    year_of_manufacture YEAR,
    car_type ENUM('sedan', 'SUV', 'hatchback', 'convertible'),
    rental_rate DECIMAL(10, 2),
    FOREIGN KEY (service_id) REFERENCES Service(provider_service_id) ON DELETE CASCADE
);


CREATE TABLE Activity (
    service_id INT PRIMARY KEY,
    activity_name VARCHAR(255),
    age_requirement INT,
    duration_hours INT,
    activity_description TEXT,
    FOREIGN KEY (service_id) REFERENCES Service(provider_service_id) ON DELETE CASCADE
);


CREATE TABLE Membership (
    membership_id INT PRIMARY KEY AUTO_INCREMENT,
    membership_type ENUM('Basic', 'Premium', 'Professional'),
    duration ENUM('Monthly', '6-monthly', 'One year'),
    membership_status VARCHAR(255),
    description VARCHAR(255)
);


CREATE TABLE Card (
    card_id INT PRIMARY KEY AUTO_INCREMENT,
    beneficiary_id INT UNIQUE,
    cardnumber VARCHAR(16) UNIQUE,
    barcode VARCHAR(50) NOT NULL,
    expiration_date DATE NOT NULL,
    FOREIGN KEY (beneficiary_id) REFERENCES Beneficiary(beneficiary_id) ON DELETE CASCADE,
    FOREIGN KEY (membership_id) REFERENCES Membership(membership_id)

);


CREATE TABLE Points (
    points_id INT PRIMARY KEY AUTO_INCREMENT,
    card_id INT UNIQUE,
    points INT NOT NULL,
    available_coupons TEXT,
    FOREIGN KEY (card_id) REFERENCES Card(card_id) ON DELETE CASCADE
);

CREATE TABLE PointsHistory (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    points_id INT,
    transaction_type ENUM('earn', 'spend') NOT NULL,
    points_change INT NOT NULL,
    transaction_date DATETIME NOT NULL,
    FOREIGN KEY (points_id) REFERENCES Points(points_id) ON DELETE CASCADE
);



CREATE TABLE Booking (
    booking_id INT PRIMARY KEY AUTO_INCREMENT,
    booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    booking_status ENUM('pending', 'confirmed', 'canceled') NOT NULL ,
    booker_id INT,
    service_id INT,
    booking_details TEXT,
    FOREIGN KEY (booker_id) REFERENCES Beneficiary(beneficiary_id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES Service(provider_service_id) ON DELETE CASCADE
);

CREATE TABLE Review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    reviewer_id INT,
    reviewee_id INT,
    rating INT,
    review_text TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (reviewer_id) REFERENCES User(user_id) ON DELETE CASCADE,
    FOREIGN KEY (reviewee_id) REFERENCES User(user_id) ON DELETE CASCADE
);

CREATE TABLE Response (
    response_id INT PRIMARY KEY AUTO_INCREMENT,
    review_id INT,
    replier_id INT,
    reply_text TEXT,
    reply_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (review_id) REFERENCES Review(review_id) ON DELETE CASCADE,
    FOREIGN KEY (replier_id) REFERENCES User(user_id) ON DELETE CASCADE
);

CREATE TABLE ChatMessage (
    message_id INT PRIMARY KEY AUTO_INCREMENT,
    sender_id INT,
    receiver_id INT,
    message_text TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES User(user_id) ON DELETE CASCADE,
    FOREIGN KEY (receiver_id) REFERENCES User(user_id) ON DELETE CASCADE
);

CREATE TABLE SavedBusiness (
    saved_business_id INT PRIMARY KEY AUTO_INCREMENT,
    beneficiary_id INT,
    business_id INT,
    saved_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (beneficiary_id) REFERENCES Beneficiary(beneficiary_id) ON DELETE CASCADE,
    FOREIGN KEY (business_id) REFERENCES Businesses(business_id) ON DELETE CASCADE
);

CREATE TABLE SavedService (
    saved_service_id INT PRIMARY KEY AUTO_INCREMENT,
    beneficiary_id INT,
    service_id INT,
    saved_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (beneficiary_id) REFERENCES Beneficiary(beneficiary_id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES Service(provider_service_id) ON DELETE CASCADE
);

CREATE TABLE Application (
    application_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    application_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'accepted', 'rejected') NOT NULL DEFAULT 'pending',
    additional_info TEXT,
    admin_notes TEXT,
    FOREIGN KEY (user_id) REFERENCES SimpleUser(user_id) ON DELETE CASCADE
);


CREATE TABLE FriendRequest (
    friendship_id INT PRIMARY KEY AUTO_INCREMENT,
    user1_id INT,
    user2_id INT,
    status ENUM('pending', 'accepted','rejected','ended') NOT NULL DEFAULT 'pending',
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    accepted_at TIMESTAMP,
    FOREIGN KEY (user1_id) REFERENCES Beneficiery(beneficiery_id) ON DELETE CASCADE,
    FOREIGN KEY (user2_id) REFERENCES Beneficiery(beneficiery_id) ON DELETE CASCADE
);
